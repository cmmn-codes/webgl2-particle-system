{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-50cce0aaafa742c2.js","node_modules/@parcel/runtime-js/lib/runtime-2d72151ab3c8a885.js","node_modules/@parcel/runtime-js/lib/runtime-f0d851cbd869fc65.js","node_modules/twgl.js/dist/5.x/twgl-full.module.js","src/index.js","src/shaders/update.vert","src/shaders/update.frag","src/shaders/render.vert","src/shaders/render.frag","src/shaders/display-texture.vert","src/shaders/display-texture.frag"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"5CZhm\\\":\\\"index.ecd37f9d.js\\\",\\\"7xKxR\\\":\\\"text.835d3710.png\\\",\\\"hHIMw\\\":\\\"logo.62830d36.png\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7xKxR\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hHIMw\")).toString();","/* @license twgl.js 5.0.1 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy,\n  create: create,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply,\n  negate: negate,\n  normalize: normalize,\n  setDefaultType: setDefaultType,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create$1() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy$1(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy$1(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create();\n  yAxis = yAxis || create();\n  zAxis = zAxis || create();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal(m, v, dst) {\n  dst = dst || create();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy$1,\n  create: create$1,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply$1,\n  negate: negate$1,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType$1,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line\n  if (type === INT$1)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line\n  if (type === FLOAT$1)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults,\n  getNumComponents_: getNumComponents,\n  getArray_: getArray\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray$1 = getArray;  // eslint-disable-line\nconst getNumComponents$1 = getNumComponents;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal$1(mi, v, dst) {\n  dst = dst || create();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray$1(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents$1(arrayInfo, name);\n      const array = getArray$1(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray$1(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray$1(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray$1(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray$1(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer$1 = isArrayBuffer;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE$2                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$2                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };\n    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer$1(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$2;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer$1(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$2;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer$1(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer$1(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer$1(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error$1 = error;\nconst warn$1 = warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER$1                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT$3                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT$3                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT$3                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP$1              = 0x8513;\nconst TEXTURE_3D$1                    = 0x806F;\nconst TEXTURE_2D_ARRAY$1              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT$3;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ProgramOptions} progOptions\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, progOptions) {\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Load the shader source\n  gl.shaderSource(shader, prepShaderSource(shaderSource).shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  if (!progOptions.callback && !checkShaderStatus(gl, shaderType, shader, progOptions.errorCallback)) {\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {bool} true if shader is ok.\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error$1;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);\n  }\n  return compiled;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback && opt_attribs.errors) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error$1;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions);\n      newShaders.push(shader);\n    }\n    if (isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    deleteShaders(gl, newShaders);\n    return reportError(progOptions, \"not enough shaders for program\");\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program);\n  if (progOptions.callback) {\n    checkForProgramLinkCompletionAsync(gl, program, progOptions);\n    return null;\n  } else {\n    if (!checkProgramStatus(gl, program, progOptions.errorCallback)) {\n      gl.deleteProgram(program);\n      deleteShaders(gl, newShaders);\n      return null;\n    }\n    return program;\n  }\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nfunction createProgramAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, program) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(program);\n      }\n    };\n    createProgram(gl, shaders, programOptions);\n  });\n}\n\n/**\n * Same as createProgramInfo but returns a promise\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoAsync(gl, shaders, ...args) {\n  return new Promise((resolve, reject) => {\n    const programOptions = getProgramOptions(...args);\n    programOptions.callback = (err, programInfo) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(programInfo);\n      }\n    };\n    createProgramInfo(gl, shaders, programOptions);\n  });\n}\n\n\n/**\n * Asynchronously wait for program to link.\n * Note: if 'KHR_parallel_shader_compile' extension does not\n * exist then compilation will not be truly async.\n * @param {WebGLRenderingContext} gl The context\n * @param {WebGLProgram} program The program\n * @param {module:twgl.ProgramOptions} progOptions Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @private\n */\nasync function checkForProgramLinkCompletionAsync(gl, program, progOptions) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n\n  const success = checkProgramStatus(gl, program, progOptions.errorCallback);\n  const err = success ? undefined : progOptions.errors.join('\\n');\n  if (!success) {\n    const errFn = progOptions.errorCallback || error$1;\n    errFn(err);\n    gl.deleteProgram(program);\n    // TODO: delete shaders, but only shaders that were created newly for this\n    // program\n    program = null;\n  }\n  progOptions.callback(err, program);\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {bool} true if program is ok\n * @private\n */\nfunction checkProgramStatus(gl, program, errFn) {\n  errFn = errFn || error$1;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n  }\n  return linked;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ProgramOptions} [progOptions] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, progOptions) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    return reportError(progOptions, `unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    return reportError(progOptions, 'unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, progOptions);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions);\n    if (!progOptions.callback && !shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn$1(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      let programInfo;\n      if (!err) {\n        programInfo = createProgramInfoFromProgram(gl, program);\n      }\n      origCallback(err, programInfo);\n    };\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT$3                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D$2                     = 0x0de1;\n\nconst UNSIGNED_BYTE$3                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst RGBA$1                           = 0x1908;\nconst DEPTH_COMPONENT24$1              = 0x81a6;\nconst DEPTH_COMPONENT32F$1             = 0x8cac;\nconst DEPTH24_STENCIL8$1               = 0x88f0;\nconst DEPTH32F_STENCIL8$1              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4$1                          = 0x8056;\nconst RGB5_A1$1                        = 0x8057;\nconst RGB565$1                         = 0x8D62;\nconst DEPTH_COMPONENT16$1              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL$1                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE$1                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR$1                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },\n  { format: DEPTH_STENCIL$1, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4$1] = true;\nrenderbufferFormats[RGB5_A1$1] = true;\nrenderbufferFormats[RGB565$1] = true;\nrenderbufferFormats[DEPTH_STENCIL$1] = true;\nrenderbufferFormats[DEPTH_COMPONENT16$1] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D$2,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER$2           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$2 = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n  setDefaults(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults$2.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults$2 as setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","import renderVert from './shaders/render.vert';\nimport renderFrag from './shaders/render.frag';\nimport updateVert from './shaders/update.vert';\nimport updateFrag from './shaders/update.frag';\nimport displayVert from './shaders/display-texture.vert';\nimport displayFrag from './shaders/display-texture.frag';\nimport textImgUrl from 'url:./text.png';\nimport logoImgUrl from 'url:./logo.png';\n\nimport * as twgl from 'twgl.js';\n\nconst systemSettings = {\n  population: 65535 * 2, //+ 100,\n  // sensorDist: 30,\n  // sensorAngle: Math.PI / 5 + 0.01,\n  // decay: 0.001,\n  // sensorDist: 50,\n  // sensorAngle: Math.PI / 6 + 0.01,\n  // decay: 0.01,\n  sensorDist: 5 + Math.random() * 50,\n  sensorAngle: Math.random() * (Math.PI / 3) + 0.01, //   / 5 + 0.01,\n  decay: 0.001 + Math.random() * 0.1,\n  // sensorDist: 12.16155668349373,\n  // sensorAngle: 0.14858670434295396,\n  // decay: 0.0635702815781241,\n  showEnvironment: !true, //false,\n  imageToShow: 0,\n};\n\nfunction update(property) {\n  return (e) => {\n    const v = parseFloat(e.target.value);\n    systemSettings[property] = v;\n    console.log(property, v);\n  };\n}\n\nfunction gui() {\n  const imageSwitchButton = document.getElementById('image-switch');\n  imageSwitchButton.addEventListener('click', () => {\n    systemSettings.imageToShow = (systemSettings.imageToShow + 1) % 2;\n  });\n  const angleInput = document.getElementById('angle');\n  const distanceInput = document.getElementById('distance');\n  const decayInput = document.getElementById('decay');\n  angleInput.value = systemSettings.sensorAngle;\n  distanceInput.value = systemSettings.sensorDist;\n  decayInput.value = systemSettings.decay;\n  angleInput.addEventListener('input', update('sensorAngle'));\n  distanceInput.addEventListener('input', update('sensorDist'));\n  decayInput.addEventListener('input', update('decay'));\n}\n\ngui();\n\n// Temptress\n// sensorDist: 12.16155668349373,\n// sensorAngle: 0.14858670434295396,\n// decay: 0.0635702815781241,\n\n// Chalk drawing\n// decay: 0.009735140535676565\n// sensorAngle: 1.008056445012859\n// sensorDist: 21.994056589919225\n\n// window.addEventListener('click', () => {\n//   systemSettings.imageToShow = (systemSettings.imageToShow + 1) % 2;\n// });\n// window.addEventListener('keydown', () => {\n//   systemSettings.sensorDist = 5 + Math.random() * 50;\n//   systemSettings.sensorAngle = Math.random() * (Math.PI / 3) + 0.01; //   / 5 + 0.01,\n//   systemSettings.decay = 0.001 + Math.random() * 0.1;\n//   // gui();\n//   console.log('settings', systemSettings);\n// });\n\nasync function loadImage(src) {\n  // Asynchronously load an image\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.src = src;\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', (e) => reject(e));\n  });\n}\n\nfunction randomData(size_x, size_y) {\n  const d = [];\n  for (let i = 0; i < size_x * size_y; ++i) {\n    d.push(Math.random());\n  }\n  return new Uint8Array(d);\n}\n\nfunction initialData(num) {\n  const data = [];\n  for (let i = 0; i < num; ++i) {\n    // position\n    data.push(0.5 + (Math.random() - 0.5) * 0.6);\n    data.push(0.5 + (Math.random() - 0.5) * 0.6);\n    // velocity\n    data.push((Math.random() - 0.5) * 0.01);\n    data.push((Math.random() - 0.5) * 0.01);\n  }\n  return data;\n}\n\nfunction setup(gl, images) {\n  const particleCount = systemSettings.population;\n  // create gl program for updating particle movement\n  const updateProgram = twgl.createProgramInfo(gl, [updateVert, updateFrag], {\n    transformFeedbackVaryings: ['v_Position', 'v_Velocity'],\n    transformFeedbackMode: gl.INTERLEAVED_ATTRIBS,\n  });\n  console.log(updateProgram);\n  // create gl program for drawing particle movement\n  const renderProgram = twgl.createProgramInfo(gl, [renderVert, renderFrag]);\n  console.log(renderProgram);\n\n  // create initial particle data\n  const data = new Float32Array(initialData(particleCount));\n  const buffers = Array.from({ length: 2 }).map(() =>\n    twgl.createBufferFromTypedArray(gl, data, gl.ARRAY_BUFFER, gl.STREAM_DRAW)\n  );\n\n  const randomTexture = twgl.createTexture(gl, {\n    src: randomData,\n    format: gl.R8,\n    internalFormat: gl.R8,\n    wrap: gl.MIRRORED_REPEAT,\n    level: 0,\n    min: gl.NEAREST,\n  });\n\n  const imageTextures = images.map((image) =>\n    twgl.createTexture(gl, {\n      src: image,\n      format: gl.RGBA,\n      internalFormat: gl.RGBA,\n      wrap: gl.CLAMP_TO_EDGE,\n      level: 0,\n      min: gl.LINEAR,\n      flipY: true,\n    })\n  );\n\n  const updateBufferInfos = buffers\n    .map((buffer) => {\n      return twgl.createBufferInfoFromArrays(gl, {\n        i_Position: {\n          numComponents: 2,\n          buffer: buffer,\n          type: gl.FLOAT,\n          stride: 4 * 4,\n        },\n        i_Velocity: {\n          numComponents: 2,\n          buffer: buffer,\n          type: gl.FLOAT,\n          stride: 4 * 4,\n          offset: 4 * 2,\n        },\n      });\n    })\n    .map((e) => {\n      // hack to allow attributes to share buffer\n      // twgl will calculate the number of elements as double.\n      e.numElements = particleCount;\n      return e;\n    });\n\n  const renderBufferInfos = buffers\n    .map((buffer) => {\n      return twgl.createBufferInfoFromArrays(gl, {\n        i_Position: {\n          numComponents: 2,\n          buffer: buffer,\n          type: gl.FLOAT,\n          stride: 4 * 4,\n        },\n      });\n    })\n    .map((e) => {\n      // hack to allow attributes to share buffer\n      // twgl will calculate the number of elements as double.\n      e.numElements = particleCount;\n      return e;\n    });\n  console.log('updateBufferInfos');\n  console.log(updateBufferInfos);\n  console.log('renderBufferInfos');\n  console.log(renderBufferInfos);\n\n  // create vertex array objects for particle system\n  const vaos = [\n    twgl.createVertexArrayInfo(gl, updateProgram, updateBufferInfos[0]),\n    twgl.createVertexArrayInfo(gl, updateProgram, updateBufferInfos[1]),\n    twgl.createVertexArrayInfo(gl, renderProgram, renderBufferInfos[0]),\n    twgl.createVertexArrayInfo(gl, renderProgram, renderBufferInfos[1]),\n  ];\n  // I am actually not sure why this is required.\n  // Buffer from creating VertexArrayInfo is still bound which causes issues\n  // with the transform feedback in the render cycle.\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n  // create frame buffer for rendering particle indirect feedback\n  const attachments = [\n    {\n      format: gl.RGBA,\n      type: gl.UNSIGNED_BYTE,\n      min: gl.NEAREST,\n      wrap: gl.REPEAT,\n      level: 0,\n    },\n  ];\n  const fbis = [\n    twgl.createFramebufferInfo(gl, attachments),\n    twgl.createFramebufferInfo(gl, attachments),\n    twgl.createFramebufferInfo(gl, attachments),\n  ];\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  // create gl program for rendering a texture to the screen\n  const displayTextureProgram = twgl.createProgramInfo(gl, [\n    displayVert,\n    displayFrag,\n  ]);\n  console.log(displayTextureProgram);\n  const displayTextureBufferInfo = twgl.createBufferInfoFromArrays(gl, {\n    i_Position: {\n      numComponents: 2,\n      data: [-1, 1, -1, -1, 1, -1, 1, 1],\n    },\n    indices: {\n      numComponents: 2,\n      data: [3, 2, 1, 3, 1, 0],\n    },\n  });\n  const displayTextureVao = twgl.createVertexArrayInfo(\n    gl,\n    displayTextureProgram,\n    displayTextureBufferInfo\n  );\n\n  // setup gl rendering\n  gl.enable(gl.BLEND);\n  gl.blendEquation(gl.FUNC_ADD);\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n  gl.depthMask(false);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  return {\n    num: particleCount,\n    read: 0,\n    write: 1,\n    updateProgram,\n    updateBufferInfos,\n    renderProgram,\n    renderBufferInfos,\n    oldTime: 0,\n    totalTime: 0,\n    vaos,\n    fbis,\n    displayTextureProgram,\n    displayTextureBufferInfo,\n    displayTextureVao,\n    randomTexture,\n    imageTextures: imageTextures,\n  };\n}\n\nfunction getTimeDelta(newTime, oldTime) {\n  let timeDelta = 0.0;\n  if (oldTime !== 0) {\n    timeDelta = newTime - oldTime;\n    if (timeDelta > 500.0) {\n      /* If delta is too high, do nothing.\n         Maybe tab was in background or something. */\n      timeDelta = 0.0;\n    }\n  }\n  return timeDelta;\n}\n\nfunction run(gl, state, time) {\n  /* Calculate time delta. */\n  let timeDelta = 16.66; // getTimeDelta(time, state.oldTime);\n  /* Set the previous update timestamp for calculating time delta in the\n       next frame. */\n  state.oldTime = time;\n  // clear buffer\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  twgl.resizeCanvasToDisplaySize(gl.canvas);\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n  // Update particle system\n\n  gl.useProgram(state.updateProgram.program);\n  twgl.setBuffersAndAttributes(gl, state.updateProgram, state.vaos[state.read]);\n  twgl.setUniforms(state.updateProgram, {\n    u_Texture: state.fbis[state.write].attachments[0],\n    u_TimeDelta: timeDelta / 1000,\n    u_Random: state.randomTexture,\n    u_Size: [gl.canvas.width, gl.canvas.height],\n    u_SensorAngle: systemSettings.sensorAngle,\n    u_SensorDist: systemSettings.sensorDist,\n  });\n  gl.enable(gl.BLEND);\n  gl.enable(gl.RASTERIZER_DISCARD);\n  const writeBuffer =\n    state.updateBufferInfos[state.write].attribs['i_Velocity'].buffer;\n  const loops = Math.floor(state.num / 65536);\n  const offset = state.num < 65535 ? state.num : 65535;\n  gl.bindBufferRange(\n    gl.TRANSFORM_FEEDBACK_BUFFER,\n    0,\n    writeBuffer,\n    4 * 4 * offset,\n    4 * 4 * (state.num - offset)\n  );\n  gl.beginTransformFeedback(gl.POINTS);\n  twgl.drawBufferInfo(\n    gl,\n    state.vaos[state.read],\n    gl.POINTS,\n    state.num - offset,\n    offset\n  );\n  gl.endTransformFeedback();\n  gl.bindBufferRange(\n    gl.TRANSFORM_FEEDBACK_BUFFER,\n    0,\n    writeBuffer,\n    0,\n    4 * 4 * offset\n  );\n  gl.beginTransformFeedback(gl.POINTS);\n  twgl.drawBufferInfo(gl, state.vaos[state.read], gl.POINTS, offset, 0);\n  gl.endTransformFeedback();\n  gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  gl.bindVertexArray(null);\n  gl.disable(gl.RASTERIZER_DISCARD);\n\n  // Render particle system\n  gl.bindFramebuffer(gl.FRAMEBUFFER, state.fbis[2].framebuffer);\n  twgl.resizeCanvasToDisplaySize(gl.canvas);\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  gl.useProgram(state.renderProgram.program);\n  twgl.setBuffersAndAttributes(\n    gl,\n    state.renderProgram,\n    state.vaos[state.read + 2]\n  );\n  gl.clearColor(0, 0, 0, 0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  twgl.drawBufferInfo(gl, state.vaos[state.read + 2], gl.POINTS);\n  gl.bindVertexArray(null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  gl.useProgram(state.displayTextureProgram.program);\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, state.fbis[state.write].framebuffer);\n  // diffuse texture and keep around\n  gl.clearColor(0, 0, 0, 1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  twgl.resizeCanvasToDisplaySize(gl.canvas);\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  twgl.setBuffersAndAttributes(\n    gl,\n    state.displayTextureProgram,\n    state.displayTextureBufferInfo\n  );\n  twgl.setUniforms(state.displayTextureProgram, {\n    u_Texture: state.fbis[2].attachments[0],\n    u_Previous: state.fbis[state.read].attachments[0],\n    u_Extra: state.imageTextures[systemSettings.imageToShow],\n    u_Decay: systemSettings.decay,\n    u_Width: gl.canvas.width,\n    u_Height: gl.canvas.height,\n  });\n  gl.disable(gl.BLEND);\n  twgl.drawBufferInfo(gl, state.displayTextureVao);\n  gl.bindVertexArray(null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  // draw texture to the screen\n  gl.clearColor(0, 0, 0, 1);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  twgl.resizeCanvasToDisplaySize(gl.canvas);\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n  twgl.setBuffersAndAttributes(\n    gl,\n    state.displayTextureProgram,\n    state.displayTextureBufferInfo\n  );\n  twgl.setUniforms(state.displayTextureProgram, {\n    u_Texture: state.fbis[2].attachments[0],\n    u_Previous: systemSettings.showEnvironment\n      ? state.fbis[state.write].attachments[0]\n      : state.fbis[2].attachments[0],\n    u_Width: gl.canvas.width,\n    u_Height: gl.canvas.height,\n    u_Decay: 0,\n  });\n  gl.disable(gl.BLEND);\n  twgl.drawBufferInfo(gl, state.displayTextureVao);\n  gl.bindVertexArray(null);\n\n  let tmp = state.read;\n  state.read = state.write;\n  state.write = tmp;\n}\n\nasync function main() {\n  const canvas = document.createElement('canvas');\n  canvas.width = window.innerWidth; // / 2;\n  canvas.height = window.innerHeight; // / 2;\n  // canvas.style.width = '100%';\n  // canvas.style.height = '100%';\n  console.log(canvas.width, canvas.height);\n  const gl = canvas.getContext('webgl2', {\n    premultipliedAlpha: false,\n    alpha: false,\n  });\n  console.log(gl.getParameter(gl.MAX_ELEMENT_INDEX));\n  console.log(gl.getParameter(gl.MAX_ELEMENTS_VERTICES));\n  console.log(gl.getParameter(gl.MAX_ELEMENTS_INDICES));\n  console.log(\n    gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS)\n  );\n  if (gl != null) {\n    document.body.appendChild(canvas);\n    const logoImage = await loadImage(logoImgUrl);\n    const textImage = await loadImage(textImgUrl);\n    const state = setup(gl, [logoImage, textImage]);\n    const loop = (ts) => {\n      run(gl, state, ts);\n      run(gl, state, ts);\n      window.requestAnimationFrame(function (ts) {\n        loop(ts);\n      });\n    };\n\n    window.requestAnimationFrame(function (ts) {\n      loop(ts);\n    });\n  } else {\n    document.write('WebGL2 is not supported by your browser');\n  }\n}\n\nwindow.onload = main;\n","#version 300 es\nprecision mediump float;\n\n\n/* Where the particle is. */\nlayout (location = 1) in vec2 i_Position;\nlayout (location = 2) in vec2 i_Velocity;\n\n/* Number of seconds (possibly fractional) that has passed since the last\n   update step. */\nuniform float u_TimeDelta;\nuniform vec2 u_Size;\nuniform sampler2D u_Random;\nuniform sampler2D u_Texture;\nuniform float u_SensorAngle;\nuniform float u_SensorDist;\n\n\n/* Outputs. These mirror the inputs. These values will be captured\n   into our transform feedback buffer! */\nout vec2 v_Position;\nout vec2 v_Velocity;\n\nvec2 rotate(vec2 v, float theta) {\n    float s = sin(theta);\n    float c = cos(-theta);\n    return vec2(\n        v.x * c + (v.y * s * -1.),\n        v.x * s + v.y * c);\n}\n\nvec2 sense(vec2 p, vec2 v, float dist, float theta) {\n    vec2 ratio = dist / u_Size;\n    vec2 c = normalize(v / ratio);\n    vec2 r = rotate(c, -theta) * ratio;\n    vec2 l = rotate(c, theta) * ratio;\n    c *= ratio;\n//    return vec2(ratio.x, ratio.y) / c;\n    vec2 wp = vec2(mod(p.x, 1.0), mod(p.y, 1.0));\n    float ct = texture(u_Texture, wp + c).r;\n    float rt = texture(u_Texture, wp + r).r;\n    float lt = texture(u_Texture, wp + l).r;\n\n    // detect any obstruction ahead\n    float front = texture(u_Texture, wp + c).r;\n    if (front > 0.99) {\n        ivec2 p = ivec2(i_Position.x * 255.0, i_Position.y * 255.0);\n        float rand = texelFetch(u_Random, p, 0).r;\n        return rand < 0.5 ? l : r;// l * length(v);\n    }\n\n    if (ct > lt && ct > rt) {\n        // keep going straight\n        return c;\n    }\n    if (ct < lt && ct < rt) {\n        // random direction change\n        ivec2 p = ivec2(i_Position.x * 255.0, i_Position.y * 255.0);\n        float rand = texelFetch(u_Random, p, 0).r;\n        return rand < 0.5 ? l : r;// l * length(v);\n    }\n    if (lt < rt) {\n        // turn right\n        return r;\n    }\n    if (lt > rt) {\n        return l;\n    }\n    return c;\n}\n\nvoid main() {\n    vec2 newDir = sense(i_Position, i_Velocity, u_SensorDist, u_SensorAngle);\n    vec2 updated = i_Position + newDir * u_TimeDelta;// * u_TimeDelta * 2.);\n    v_Position = vec2(mod(updated.x, 1.0), mod(updated.y, 1.0));//cur.r > 0.3 ? i_Position : vec2(mod(updated.x, 1.0), mod(updated.y, 1.0));\n    v_Velocity = newDir;// cur.r > 0.3 ? i_Velocity * -1. : i_Velocity;\n}\n","#version 300 es\nprecision mediump float;\n\nvoid main() { discard; }\n","#version 300 es\nprecision highp float;\n\nlayout (location = 1) in vec2 i_Position;\nlayout (location = 2) in vec2 i_Velocity;\n\nuniform float width;\nuniform float height;\n\nout vec2 v_TexCoord;\n\nvoid main() {\n    gl_PointSize = 1.;\n    v_TexCoord = i_Position;\n    gl_Position = vec4(i_Position * 2.0 - 1.0, 0.0, 1.0);\n}\n","#version 300 es\nprecision highp float;\n\nin vec2 v_TexCoord;\nout vec4 o_FragColor;\n\nvoid main() {\n    float v = 1.0;\n//    o_FragColor = vec4(c.rgb + 0.01, 1.0);\n    o_FragColor = vec4(v, v, v, 1.0);\n//    o_FragColor = vec4(u_Texture, 1.0);\n}\n","#version 300 es\nprecision highp float;\n\nin vec2 i_Position;\n// a varying to pass the texture coordinates to the fragment shader\nout vec2 v_Texcoord;\n\nvoid main() {\n    gl_Position = vec4(i_Position, 0, 1);\n    v_Texcoord = (i_Position + 1.0) / 2.;\n}\n","#version 300 es\n\nprecision highp float;\n\nin vec2 v_Texcoord;\n\nuniform sampler2D u_Texture;\nuniform sampler2D u_Previous;\nuniform sampler2D u_Extra;\nuniform float u_Width;\nuniform float u_Height;\nuniform float u_Decay;\n\nout vec4 outColor;\n\nvoid main() {\n    //    outColor = texture(u_Texture, v_Texcoord + 0.5);\n    ivec2 p = ivec2(v_Texcoord.x * u_Width, v_Texcoord.y * u_Height);\n    int w = int(u_Width);\n    int h = int(u_Height);\n    float t = 0.1;\n    for (int i = -1; i < 2; i++) {\n        for (int j = -1; j < 2; j++) {\n            int x = (w + p.x + i) % w;\n            int y = (h + p.y + j) % h;\n            t += texelFetch(u_Previous, ivec2(x, y), 0).r;\n        }\n    }\n    t = clamp((t / 9.0) - u_Decay, 0., 1.);\n\n    float c = texelFetch(u_Texture, p, 0).r;\n    if (u_Decay > 0.0) {\n        float v = texture(u_Extra, v_Texcoord).r;\n        if (v > 0.0) {\n            outColor = vec4(0.7);\n            return;\n        }\n\n    }\n    outColor = vec4(t + c, t + c, t + c, 1.0);\n    //    outColor = vec4(1.,0.0,1.,1.0);\n}\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$46519473a86dc39c$exports","URL","resolve","import","meta","url","toString","$8623eddb4acddc56$exports","$065afaecc735fbee$var$VecType","Float32Array","$065afaecc735fbee$var$create","x","y","z","dst","$065afaecc735fbee$var$add","a","b","$065afaecc735fbee$var$multiply","$065afaecc735fbee$var$MatType","$065afaecc735fbee$var$identity","$065afaecc735fbee$var$inverse","m","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","d","$065afaecc735fbee$var$transformPoint","v","v0","v1","v2","$065afaecc735fbee$var$transformDirection","$065afaecc735fbee$var$glTypeToTypedArray","tt","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","$065afaecc735fbee$export$bddf845047a0e959","typedArray","Uint8ClampedArray","$065afaecc735fbee$export$9546290c15d36fce","typedArrayType","$065afaecc735fbee$export$3dc63662699923fc","type","CTOR","$065afaecc735fbee$export$9dd3754ae86f0017","SharedArrayBuffer","buffer","ArrayBuffer","$065afaecc735fbee$var$error","args","console","error","$065afaecc735fbee$var$isRenderbuffer","gl","t","WebGLRenderbuffer","$065afaecc735fbee$var$isTexture","WebGLTexture","$065afaecc735fbee$var$defaults","attribPrefix","$065afaecc735fbee$var$setBufferFromTypedArray","array","drawType","bindBuffer","bufferData","$065afaecc735fbee$export$6ea00fe9d038b3f9","WebGLBuffer","createBuffer","$065afaecc735fbee$var$isIndices","name","$065afaecc735fbee$export$251e3bdee27f62a4","data","$065afaecc735fbee$var$texcoordRE","$065afaecc735fbee$var$colorRE","$065afaecc735fbee$var$guessNumComponentsFromName","length1","numComponents","test","$065afaecc735fbee$export$bfceede8dab24cbd","arrayName","size","$065afaecc735fbee$var$makeTypedArray","Array","isArray","Type","$065afaecc735fbee$export$df835e2df67be3fe","arrays","attribs","forEach","attribName","attrib","value","normalization","normalize","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","undefined","$065afaecc735fbee$var$getNormalizationForTypedArray","stride","offset","divisor","$065afaecc735fbee$var$positionKeys","$065afaecc735fbee$export$140f5b0225138840","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","numElements","elementType","key","ii","getBufferParameter","totalElements","$065afaecc735fbee$var$getNumElementsFromAttributes","$065afaecc735fbee$export$2750db2b7c74f6a0","$065afaecc735fbee$export$69d8acce17089372","buffers","$065afaecc735fbee$var$getNumElementsFromNonIndexedArrays","$065afaecc735fbee$var$augmentTypedArray","cursor","push","arguments","jj","reset","opt_index","defineProperty","get","this","$065afaecc735fbee$var$createAugmentedTypedArray","opt_type","$065afaecc735fbee$var$applyFuncToV3Array","matrix","fn","len","tmp","$065afaecc735fbee$var$transformNormal$1","mi","$065afaecc735fbee$var$reorientDirections","$065afaecc735fbee$var$reorientNormals","$065afaecc735fbee$var$reorientPositions","$065afaecc735fbee$var$reorientVertices","indexOf","$065afaecc735fbee$var$createXYQuadVertices","xOffset","yOffset","position","normal","texcoord","$065afaecc735fbee$var$createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","normals","texcoords","u","numVertsAcross","z1","x1","$065afaecc735fbee$var$createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","Math","PI","longRange","theta","phi","sinTheta","sin","cosTheta","cos","sinPhi","ux","uy","uz","numVertsAround","y1","$065afaecc735fbee$var$CUBE_FACE_INDICES","$065afaecc735fbee$var$createCubeVertices","k","cornerVertices","faceNormals","uvCoords","f","faceIndices","uv","$065afaecc735fbee$var$createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","end","yy","ringRadius","yy1","ii1","$065afaecc735fbee$var$expandRLEData","rleData","padding","runLength","element","slice","apply","$065afaecc735fbee$var$create3DFVertices","colors","numVerts","color","$065afaecc735fbee$var$createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","offsetRange","lerp","s","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","c","px","py","pz","n","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","$065afaecc735fbee$var$createCylinderVertices","$065afaecc735fbee$var$createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ny","ring","ringAngle","xSin","zCos","nx","nz","slice1","ring1","nextRingIndex","nextSliceIndex","$065afaecc735fbee$var$createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","$065afaecc735fbee$var$createBufferFunc","prototype","call","$065afaecc735fbee$var$createBufferInfoFunc","$065afaecc735fbee$export$e3518b1ac7891039","texStorage2D","$065afaecc735fbee$export$e97753eae63e4e62","haveEnumsForType","enums","constructor","existing","addEnums","$065afaecc735fbee$var$defaults$1","textureColor","textureOptions","crossOrigin","$065afaecc735fbee$var$isArrayBuffer$1","$065afaecc735fbee$var$getShared2DContext","s_ctx","document","createElement","getContext","$065afaecc735fbee$var$formatInfo","numColorComponents","$065afaecc735fbee$var$s_textureInternalFormatInfo","$065afaecc735fbee$var$getTextureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","info","bytesPerElementMap","ndx","$065afaecc735fbee$export$df2d41bf86d3b760","$065afaecc735fbee$export$7972c3060d7259fe","format","$065afaecc735fbee$var$isPowerOf2","$065afaecc735fbee$export$2058af87f75a4771","$065afaecc735fbee$export$586e511f2aeecefd","$065afaecc735fbee$var$getTextureTypeForArrayType","src","defaultType","$065afaecc735fbee$var$guessDimensions","target","sqrt","$065afaecc735fbee$var$setPackState","options","colorspaceConversion","pixelStorei","premultiplyAlpha","flipY","$065afaecc735fbee$var$setSkipStateToDefault","$065afaecc735fbee$var$setTextureSamplerParameters","parameteriFn","minMag","min","mag","wrap","WebGLSampler","wrapR","wrapS","wrapT","minLod","maxLod","baseLevel","maxLevel","$065afaecc735fbee$export$145d4976a6287cac","tex","bindTexture","texParameteri","$065afaecc735fbee$export$494a924bf2d77d9a","generateMipmap","filtering","$065afaecc735fbee$var$shouldAutomaticallySetTextureFilteringForSize","auto","level","$065afaecc735fbee$var$getCubeFaceOrder","cubeFaceOrder","$065afaecc735fbee$var$getCubeFacesWithNdx","facesWithNdx","map","face","sort","$065afaecc735fbee$export$8119aa4cbf12798b","formatType","imgWidth","imgHeight","slices","nodeName","ctx","canvas","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","max","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","$065afaecc735fbee$var$noop","$065afaecc735fbee$var$setToAnonymousIfUndefinedAndURLIsNotSameOrigin","href","hostname","location","port","protocol","localOrigin","origin","$065afaecc735fbee$var$urlIsSameOrigin","$065afaecc735fbee$var$isTexImageSource","obj","ImageBitmap","ImageData","HTMLElement","$065afaecc735fbee$var$loadAndUseImage","callback","setTimeout","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","err","bm","cb","mode","fetch","response","ok","blob","bitmap","catch","e","$065afaecc735fbee$var$loadImage","$065afaecc735fbee$var$setTextureTo1PixelColor","$065afaecc735fbee$var$make1Pixel","$065afaecc735fbee$export$a0ce1a7e01ad3b32","$065afaecc735fbee$var$loadCubemapFromUrls","urls","numToLoad","errors","faces","imgs","faceTarget","otherTarget","$065afaecc735fbee$var$loadSlicesFromUrls","firstImage","$065afaecc735fbee$export$3d91b74019c3ded9","byteLength","dimensions","cbrt","unpackAlignment","faceSize","subarray","$065afaecc735fbee$export$541fcc5ad0f34e5a","$065afaecc735fbee$export$37b981a8c575f415","createTexture","$065afaecc735fbee$var$error$1","$065afaecc735fbee$var$getElementById","getElementById","$065afaecc735fbee$var$typeMap","$065afaecc735fbee$var$getBindPointForSamplerType","bindPoint","$065afaecc735fbee$var$intSetter","location1","uniform1i","$065afaecc735fbee$var$intArraySetter","uniform1iv","$065afaecc735fbee$var$intVec2Setter","uniform2iv","$065afaecc735fbee$var$intVec3Setter","uniform3iv","$065afaecc735fbee$var$intVec4Setter","uniform4iv","$065afaecc735fbee$var$samplerSetter","unit","textureOrPair","texture","sampler","activeTexture","bindSampler","$065afaecc735fbee$var$samplerArraySetter","units","textures","index","$065afaecc735fbee$var$floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","$065afaecc735fbee$var$intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","$065afaecc735fbee$var$uintAttribSetter","vertexAttrib4uiv","$065afaecc735fbee$var$matAttribSetter","typeInfo","defaultSize","count","rowOffset","setter","uniform1f","arraySetter","uniform1fv","uniform2fv","cols","uniform3fv","uniform4fv","uniform1ui","uniform1uiv","uniform2uiv","uniform3uiv","uniform4uiv","uniformMatrix2fv","rows","uniformMatrix3fv","uniformMatrix4fv","uniformMatrix2x3fv","uniformMatrix2x4fv","uniformMatrix3x2fv","uniformMatrix3x4fv","uniformMatrix4x2fv","uniformMatrix4x3fv","$065afaecc735fbee$var$attrTypeMap","$065afaecc735fbee$var$errorRE","$065afaecc735fbee$var$spaceRE","$065afaecc735fbee$var$prepShaderSource","shaderSource","lineOffset","replace","$065afaecc735fbee$var$reportError","progOptions","errorCallback","join","$065afaecc735fbee$var$loadShader","shaderType","shader","createShader","compileShader","errFn","compiled","getShaderParameter","lastError","getShaderInfoLog","getShaderSource","log","matches","matchAll","lineNoToErrorMap","Map","lineNo","parseInt","next","substring","split","line","$065afaecc735fbee$var$addLineNumbersWithError","$065afaecc735fbee$var$checkShaderStatus","deleteShader","$065afaecc735fbee$var$getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","opt","attribLocations","$065afaecc735fbee$var$defaultShaderType","$065afaecc735fbee$var$getShaderTypeFromScriptType","scriptType","$065afaecc735fbee$var$deleteShaders","shaders","$065afaecc735fbee$var$wait","ms","Promise","$065afaecc735fbee$export$327d24a04cd0dc17","realShaders","newShaders","elem","text","WebGLShader","program","createProgram","attachShader","bindAttribLocation","varyings","linkProgram","async","ext","getExtension","checkFn","getProgramParameter","COMPLETION_STATUS_KHR","waitTime","success","$065afaecc735fbee$var$checkProgramStatus","deleteProgram","$065afaecc735fbee$var$checkForProgramLinkCompletionAsync","linked","getProgramInfoLog","$065afaecc735fbee$export$87c7c742dccfe3af","shaderSources","$065afaecc735fbee$var$isBuiltIn","startsWith","$065afaecc735fbee$var$tokenRE","$065afaecc735fbee$var$addSetterToUniformTree","fullPath","node","uniformSetters","tokens","filter","tokenNdx","path","token","isArrayIndex","accessor","token1","child","$065afaecc735fbee$var$setUniformTree","$065afaecc735fbee$export$fe2460765a628597","textureUnit","createUniformSetter","uniformInfo","endsWith","uniformTree","numUniforms","getActiveUniform","substr","getUniformLocation","$065afaecc735fbee$export$ca1b1131a9f3199c","numVaryings","varying","getTransformFeedbackVarying","$065afaecc735fbee$export$7b680ab060795ae5","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","getUniformBlockIndex","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","tree","values","prop","$065afaecc735fbee$export$1fa517b18dd66830","setters","actualSetters","numArgs","aNdx","$065afaecc735fbee$export$ca2da2c8098eca9b","attribSetters","numAttribs","attribInfo","getActiveAttrib","getAttribLocation","$065afaecc735fbee$export$74da2cba014bdc09","$065afaecc735fbee$export$186607e23079b9e5","programInfo","vertexArrayObject","bindVertexArray","$065afaecc735fbee$export$9d683a1d425bd0b2","uniformBlockSpec","transformFeedbackInfo","$065afaecc735fbee$var$notIdRE","$065afaecc735fbee$export$2965a73560492a94","source","script","origCallback","$065afaecc735fbee$export$459017ad3380cbb9","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","$065afaecc735fbee$var$defaultAttachments","$065afaecc735fbee$var$attachmentsByFormat","$065afaecc735fbee$var$renderbufferFormats","$065afaecc735fbee$export$5203e5b1731cd791","attachments","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","usedColorAttachmentsPoints","framebufferInfo","framebuffer","attachmentOptions","attachment","samples","attachmentPoint","$065afaecc735fbee$var$getAttachmentPointForFormat","$065afaecc735fbee$var$COLOR_ATTACHMENT0","$065afaecc735fbee$var$isColorAttachmentPoint","$065afaecc735fbee$var$isRenderbufferFormat","createRenderbuffer","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","layer","framebufferTextureLayer","framebufferTexture2D","drawBuffers","$065afaecc735fbee$export$3a550f69329a008c","programInfos","vao","createVertexArray","$065afaecc735fbee$export$4d986a341d0b1b6c","multiplier","clientWidth","clientHeight","$35da740d59af89ba$var$systemSettings","population","sensorDist","random","sensorAngle","decay","showEnvironment","imageToShow","$35da740d59af89ba$var$update","property","parseFloat","$35da740d59af89ba$var$loadImage","reject","image","$35da740d59af89ba$var$randomData","size_x","size_y","$35da740d59af89ba$var$setup","images","particleCount","updateProgram","$parcel$interopDefault","INTERLEAVED_ATTRIBS","renderProgram","num","$35da740d59af89ba$var$initialData","from","ARRAY_BUFFER","STREAM_DRAW","randomTexture","R8","MIRRORED_REPEAT","NEAREST","imageTextures","RGBA","CLAMP_TO_EDGE","LINEAR","updateBufferInfos","i_Position","FLOAT","i_Velocity","renderBufferInfos","vaos","UNSIGNED_BYTE","REPEAT","fbis","FRAMEBUFFER","displayTextureProgram","displayTextureBufferInfo","displayTextureVao","enable","BLEND","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","clear","COLOR_BUFFER_BIT","read","write","oldTime","totalTime","$35da740d59af89ba$var$run","state","time","viewport","useProgram","u_Texture","u_TimeDelta","timeDelta","u_Random","u_Size","u_SensorAngle","u_SensorDist","RASTERIZER_DISCARD","writeBuffer","floor","bindBufferRange","TRANSFORM_FEEDBACK_BUFFER","beginTransformFeedback","POINTS","endTransformFeedback","bindBufferBase","disable","clearColor","DEPTH_BUFFER_BIT","u_Previous","u_Extra","u_Decay","u_Width","u_Height","angleInput","distanceInput","decayInput","$35da740d59af89ba$var$gui","window","onload","innerWidth","innerHeight","premultipliedAlpha","alpha","getParameter","MAX_ELEMENT_INDEX","MAX_ELEMENTS_VERTICES","MAX_ELEMENTS_INDICES","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","body","appendChild","logoImage","textImage","loop","ts","requestAnimationFrame"],"version":3,"file":"index.ecd37f9d.js.map"}